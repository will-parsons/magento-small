heat_template_version: 2015-10-15

description: |
  #### Magento 2.x

  This stack is intended for development, or low to medium traffic production websites and can be scaled as needed to accommodate future growth.
  This stack includes a Cloud Load Balancer, Cloud Database, and a Primary web server (plus optional secondary servers).
  It also includes Cloud Monitoring and Cloud Backups.

  This stack is running:
  - [Varnish](https://www.varnish-cache.org)
  - [NGINX](http://nginx.org/en/)
  - [PHP FPM](http://php-fpm.org/about/)
  - [Redis](http://redis.io/)
  - Cloud Database running MySQL 5.6 where available
  - The latest [Magento 2.x Community Edition](http://www.magentocommerce.com/product/community-edition/),
  - With the option, and full instructions, for uploading an existing Magento site.

parameter_groups:
- label: Magento Settings
  parameters:
  - magento_url
  - magento_user
  - magento_email
  - magento_fname
  - magento_lname
  - magento_eula
- label: rax-dev-params
  parameters:
  - secondary_template
  - ansible_source

parameters:
  #Magento Customization
  magento_url:
    type: string
    default: example.com
    label: Site Domain
    description: Domain to use with Magento Site
    constraints:
    - allowed_pattern: "^[a-zA-Z0-9.-]{1,255}.[a-zA-Z]{2,15}$"
      description: Must be a valid domain name
    immutable: true
  magento_user:
    type: string
    default: admin
    label: Magento Admin Username
    description: Username for Magento admin
    constraints:
    - allowed_pattern: "^[a-zA-Z0-9]*$"
      description: Only can contain A-Z and 0-9
    immutable: true
  magento_fname:
    type: string
    default: Joe
    label: Magento Admin First Name
    description: First name for Magento admin
    immutable: true
  magento_lname:
    type: string
    default: User
    label: Magento Admin Last Name
    description: Last name for Magento admin
    immutable: true
  magento_email:
    type: string
    default: admin@example.com
    label: Magento Admin E-Mail
    description: E-Mail for Magento admin
    immutable: true
  magento_eula:
    type: boolean
    label: Agree to Terms?
    description: You must agree to the terms of the Magento Community Edition License
    constraints:
    - allowed_values:
      - True
      description: |
        You must agree to the Magento Community Edition License
        which can be found here: http://opensource.org/licenses/osl-3.0.php
    immutable: true
  #Advanced Options
  magento_install:
    type: string
    default: "Don't install Magento. I will upload an existing Magento site (see instructions)"
    label: How should Magento be deployed?
    description: |
      This option determines whether or not to install Magento and/or the sample
      data, or if you will need to upload your own Magento code.
    constraints:
    - allowed_values:
      - "Fresh install of the latest Magento CE 2.x release"
      - "Fresh install of the latest Magento CE 2.x release (including sample data)"
      - "Don't install Magento. I will upload an existing Magento site (see instructions)"
    immutable: true
  server_flavor:
    type: string
    default: 7.5 GB Compute v1
    label: Flavor for Magento Server
    description: Flavor of Cloud Server to use for Magento
    constraints:
    - allowed_values:
      - 3.75 GB Compute v1
      - 7.5 GB Compute v1
      - 15 GB Compute v1
    immutable: true
  server_image:
    type: string
    default: CentOS 7 (PVHVM) (Orchestration)
    label: Server Image
    description: Image to be used for all servers in this stack
    constraints:
    - allowed_values:
      - CentOS 7 (PVHVM) (Orchestration)
    immutable: true
  database_disk:
    type: number
    default: 10
    constraints:
    - range:
        min: 10
        max: 500
    label: Database Disk (in GB)
    description: Size of the Magento Cloud Database volume in GB
  database_flavor:
    type: string
    default: 4GB Instance
    label: Cloud Database Flavor
    description: Flavor for the Magento Cloud Database
    constraints:
    - allowed_values:
      - 2GB Instance
      - 4GB Instance
      - 8GB Instance
      - 16GB Instance
      - 32GB Instance
      - 64GB Instance
  server_count:
    type: number
    label: Number of Secondary Servers
    description: Number of secondary servers to create.  These will be synchronized from the primary node
    default: 0
    constraints:
    - range:
        min: 0
        max: 10
  secondary_template:
    type: string
    default: http://catalog.rs-heat.com/magento-small/magento_small_secondary.yaml
    label: Secondary Template
    description: Template to use for secondary servers
    immutable: true
  ansible_source:
    type: string
    default: http://catalog.rs-heat.com/ansible-roles/ansible-roles.tar.gz
    label: Ansible Tarball
    description: The Ansible Roles will be pulled from the location provided
    immutable: true

resources:
  #Passwords
  magento_pass:
    type: OS::Heat::RandomString
  database_pass:
    type: OS::Heat::RandomString
  holland_pass:
    type: OS::Heat::RandomString
  ssh_pass:
    type: OS::Heat::RandomString
  #SSH Key
  ssh_key:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: "OS::stack_id" }
      save_private_key: true
  #Cloud Database
  magento_database:
    type: OS::Trove::Instance
    properties:
      name:
        str_replace:
          template: stack_Database
          params:
            stack: { get_param: "OS::stack_name" }
      flavor: { get_param: database_flavor }
      size: { get_param: database_disk }
      datastore_type: mysql
      databases:
      - name: magento
      users:
      - name: magento
        password: { get_attr: [database_pass, value] }
        databases: [magento]
      - name: holland
        password: { get_attr: [holland_pass, value] }
        databases: [magento]
  #Software Configurations
  upload_role_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: results
      config:
        str_replace:
          template: |
            #!/bin/bash
            set -e
            mkdir -p /etc/ansible/roles
            wget ansible_source -O /tmp/ansible-roles.tar.gz 2>&1
            tar -xf /tmp/ansible-roles.tar.gz --strip-components=1 -C /etc/ansible/roles
          params:
            ansible_source: { get_param: ansible_source }
  magento_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      config: |
        ---
        - name: Install and configure Magento
          hosts: localhost
          connection: local
          roles:
          - common
          - varnish
          - nginx
          - holland
          - redis
          - memcache
          - php-fpm
          - magento-ce
  other_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
      - default: "[]"
        name: lsync_dirs
        type: CommaDelimitedList
      - default: "[]"
        name: lsync_servers
        type: CommaDelimitedList
      - default: "[]"
        name: lsync_exclude
        type: CommaDelimitedList
      - default: "[]"
        name: firewall_nodes
        type: CommaDelimitedList
      - default: "[]"
        name: firewall_node_rules
        type: CommaDelimitedList
      config: |
        ---
        - name: Install and configure other things
          hosts: localhost
          connection: local
          roles:
          - lsync
          - firewall
  deploy_roles:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config: { get_resource: upload_role_config }
      server: { get_resource: magento_server }
  deploy_magento:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy_roles
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        tz: "America/Chicago"
        nginx_vhost_str: { get_param: magento_url }
        nginx_vhost_template: "magento"
        holland_mysql_user: "holland"
        holland_mysql_password: { get_attr: [holland_pass, value] }
        holland_mysql_host: { get_attr: [magento_database, hostname] }
        holland_create_user: no
        redis_instances:
        - { name: 'fpc', port: '6381', persistent: 'FALSE', maxmemory: '1gb' }
        - { name: 'obj', port: '6379', persistent: 'FALSE', maxmemory: '1gb' }
        - { name: 'ses', port: '6380', persistent: 'TRUE', maxmemory: '1gb' }
        magento_db_user: "magento"
        magento_db_password: { get_attr: [database_pass, value] }
        magento_db_name: "magento"
        mysql_host_ip: { get_attr: [magento_database, hostname] }
        magento_sftp_user: "magento"
        magento_sftp_password: { get_attr: [ssh_pass, value] }
        magento_reach_dropdown: { get_param: magento_install }
        magento_vhost_domain: { get_param: magento_url }
        magento_admin_user: { get_param: magento_user }
        magento_admin_pass: { get_attr: [magento_pass, value] }
        magento_admin_fname: { get_param: magento_fname }
        magento_admin_lname: { get_param: magento_lname }
        magento_admin_email: { get_param: magento_email }
        magento_redis_host: { get_attr: [ magento_server, networks, private, 0 ] }
        redis_host_ip: { get_attr: [ magento_server, networks, private, 0 ] }
      config: { get_resource: magento_config }
      server: { get_resource: magento_server }
  deploy_other:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy_magento
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        lsync_private_key: { get_attr: [ssh_key, private_key] }
        lsync_dirs: ['/var/www/vhosts']
        lsync_exclude:
        - str_replace:
            template: '/var/www/vhosts/domain/httpdocs/var/log/'
            params:
              domain: { get_param: magento_url }
        - str_replace:
            template: '/var/www/vhosts/domain/httpdocs/var/cache/'
            params:
              domain: { get_param: magento_url }
        lsync_servers: { get_attr: [magento_secondary, private_ip] }
        firewall_global_rules: [ "0.0.0.0,0,22,tcp", "0.0.0.0,0,80,tcp", "0.0.0.0,0,443,tcp"]
        firewall_nodes: { get_attr: [magento_secondary, private_ip] }
        firewall_node_rules: ['32,6379,tcp','32,6380,tcp','32,6381,tcp']
      config: { get_resource: other_config }
      server: { get_resource: magento_server }
  #Master Server
  magento_server:
    type: OS::Nova::Server
    properties:
      name: { get_param: "OS::stack_name" }
      image: { get_param: server_image }
      flavor: { get_param: server_flavor }
      key_name: { get_resource: ssh_key }
      software_config_transport: POLL_TEMP_URL
      config_drive: true
      user_data_format: SOFTWARE_CONFIG
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        build_config: "backup_agent_only,monitoring_defaults"
  #Monitoring Checks
  magento_server_http_check:
    type: Rackspace::CloudMonitoring::Check
    depends_on: deploy_magento
    properties:
      entity: { get_resource: magento_server }
      type: remote.http
      label:
        str_replace:
          template: stack Master HTTP Check
          params:
            stack: { get_param: "OS::stack_name" }
      details:
        url:
          str_replace:
            template: "http://ipaddr"
            params:
              ipaddr: { get_attr: [magento_server, accessIPv4] }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      period: 120
      timeout: 10
      monitoring_zones_poll:
      - Northern Virginia (IAD)
      - Chicago (ORD)
      - Dallas Fort Worth (DFW)
      - London (LON)
      target_hostname: { get_attr: [magento_server, accessIPv4] }
      target_receiver: IPv4
  load_balancer_http_check:
    type: Rackspace::CloudMonitoring::Check
    depends_on: load_balancer
    properties:
      entity: { get_resource: magento_server }
      type: remote.http
      label:
        str_replace:
          template: stack Load Balancer HTTP Check
          params:
            stack: { get_param: "OS::stack_name" }
      details:
        url:
          str_replace:
            template: "http://ipaddr"
            params:
              ipaddr: { get_attr: [load_balancer, PublicIp] }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      period: 120
      timeout: 10
      monitoring_zones_poll:
      - Northern Virginia (IAD)
      - Chicago (ORD)
      - Dallas Fort Worth (DFW)
      - London (LON)
      target_hostname: { get_attr: [load_balancer, PublicIp] }
      target_receiver: IPv4
  #Cloud Backup
  magento_backup:
    type: Rackspace::Cloud::BackupConfig
    depends_on: magento_server
    properties:
      server: { get_resource: magento_server }
      BackupConfigurationName:
        str_replace:
          template: stack Weekly Backup
          params:
            stack: { get_param: "OS::stack_name" }
      Inclusions:
      - FilePath: "/var/spool/holland"
        FileItemType: "Folder"
      - FilePath: "/var/www/"
        FileItemType: "Folder"
      NotifyFailure: true
      NotifyRecipients: { get_param: magento_email }
      TimeZoneId: Central Standard Time
      StartTimeAmPm: AM
      StartTimeHour: 1
      StartTimeMinute: 0
      HourInterval: null
      DayOfWeekId: 0
      Frequency: "Daily"
      VersionRetention: 30
  #Secondary Server
  magento_secondary:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: server_count }
      resource_def:
        type: { get_param: secondary_template }
        properties:
          ssh_key: { get_resource: ssh_key }
          parent_stack_id: { get_param: "OS::stack_id" }
          server_image: { get_param: server_image }
          server_flavor: { get_param: server_flavor }
          apache_default_domain: { get_param: magento_url }
          master_server: { get_attr: [ magento_server, networks, private, 0 ] }
          magento_pass: { get_attr: [magento_pass, value] }
          server_name:
            str_replace:
              template: stack-secondary-%index%
              params:
                stack: { get_param: "OS::stack_name" }
          ansible_source: { get_param: ansible_source }
  #Cloud Load Balancer
  load_balancer:
    type: Rackspace::Cloud::LoadBalancer
    depends_on:
    - deploy_magento
    - magento_secondary
    properties:
      name:
        str_replace:
          template: stack_Load_Balancer
          params:
            stack: { get_param: "OS::stack_name" }
      nodes:
      - addresses: [ { get_attr: [magento_server, networks, private, 0] } ]
        port: 80
        condition: ENABLED
      - addresses: { get_attr: [magento_secondary, private_ip] }
        port: 80
        condition: ENABLED
      port: 80
      protocol: HTTP
      algorithm: ROUND_ROBIN
      contentCaching: ENABLED
      timeout: 120
      virtualIps:
      - type: PUBLIC
        ipVersion: IPV4
      metadata:
        rax-heat: { get_param: "OS::stack_id" }

outputs:
  magento_login_user:
    description: Magento Admin User
    value:
      get_param: magento_user
  magento_login_password:
    description: Magento Admin Password
    value:
      get_attr: [magento_pass, value]
  magento_public_ip:
    description: Load Balancer IP
    value:
      get_attr: [load_balancer, PublicIp]
  magento_admin_url:
    description: Magento Admin URL
    value:
      str_replace:
        template: "https://domain/admin/"
        params:
          domain: { get_param: magento_url }
  magento_public_url:
    description: Magento Public URL
    value:
      str_replace:
        template: "http://domain/"
        params:
          domain: { get_param: magento_url }
  mysql_user:
    description: Database User
    value: "magento"
  mysql_password:
    description: Database Password
    value:
      get_attr: [database_pass, value]
  ssh_private_key:
    description: SSH Private Key
    value:
      get_attr: [ssh_key, private_key]
  server_ip:
    description: Primary Server Public IP
    value:
      get_attr: [magento_server, accessIPv4]
  ssh_password:
    description: Magento SSH Password
    value:
      get_attr: [ ssh_pass, value ]
  secondary_ips:
    description: Secondary Node IPs
    value:
      get_attr: [magento_secondary, public_ip]
